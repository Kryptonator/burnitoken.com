performance.mark('app-start'),
  window.addEventListener('load', () => {
    performance.mark('app-loaded'), performance.measure('app-loading', 'app-start', 'app-loaded');
  });
const loadingManager = {
    show: (e) => {
      const t = document.getElementById(e);
      if (t) {
        t.setAttribute('data-loading', 'true');
        const e = document.createElement('div');
        (e.className =
          'loading-spinner absolute inset-0 flex items-center justify-center bg-white/80'),
          (e.innerHTML =
            '<div class="animate-spin rounded-full h-8 w-8 border-t-2 border-orange-500"></div>'),
          t.appendChild(e);
      }
    },
    hide: (e) => {
      const t = document.getElementById(e);
      if (t) {
        t.removeAttribute('data-loading');
        const e = t.querySelector('.loading-spinner');
        e && e.remove();
      }
    },
  },
  errorHandler = {
    show: (e, t, r = 'error') => {
      const n = document.getElementById(e);
      if (n) {
        const e = document.createElement('div');
        (e.className =
          'text-center p-4 rounded ' +
          ('error' === r ? 'bg-red-100 text-red-700' : 'bg-yellow-100 text-yellow-700')),
          (e.innerHTML = `\n                <div class="flex items-center justify-center">\n                    <svg class="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">\n                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" \n                            d="${'error' === r ? 'M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z' : 'M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z'}"/>\n                    </svg>\n                    <p>${t}</p>\n                </div>\n            `),
          n.appendChild(e);
      }
    },
    clear: (e) => {
      const t = document.getElementById(e);
      if (t) {
        t.querySelectorAll('.bg-red-100, .bg-yellow-100').forEach((e) => e.remove());
      }
    },
  },
  compatibilityChecker = {
    check: () => {
      const e = {
          serviceWorker: 'serviceWorker' in navigator,
          localStorage: (() => {
            try {
              return localStorage.setItem('test', 'test'), localStorage.removeItem('test'), !0;
            } catch (e) {
              return !1;
            }
          })(),
          webGL: (() => {
            try {
              return !!window.WebGLRenderingContext;
            } catch (e) {
              return !1;
            }
          })(),
          fetch: 'fetch' in window,
          intersectionObserver: 'IntersectionObserver' in window,
        },
        t = Object.entries(e)
          .filter(([, e]) => !e)
          .map(([e]) => e);
      t.length > 0 &&
        errorHandler.show(
          'compatibility-warning',
          `Your browser might not support all features. Consider updating your browser for the best experience.<br>\n                <small>Unsupported features: ${t.join(', ')}</small>`,
          'warning',
        );
    },
  };
function handleChartError() {
  ['chart-error', 'price-error-message', 'athAtlChart', 'supplyChart', 'scheduleChart'].forEach(
    (e) => {
      const t = document.getElementById(e);
      t &&
        (t.classList.remove('hidden'),
        errorHandler.show(
          e,
          'Chart data is currently unavailable. Please try again later.',
          'warning',
        ));
    },
  );
}
function registerServiceWorker() {
  'serviceWorker' in navigator &&
    window.addEventListener('load', () => {
      navigator.serviceWorker
        .register('/sw.js')
        .then((e) => {
          console.log('ServiceWorker registration successful'),
            e.addEventListener('updatefound', () => {
              const t = e.installing;
              t.addEventListener('statechange', () => {
                'installed' === t.state &&
                  navigator.serviceWorker.controller &&
                  showUpdateNotification();
              });
            });
        })
        .catch((e) => console.error('ServiceWorker registration failed:', e));
    });
}
function showUpdateNotification() {
  const e = document.createElement('div');
  (e.className =
    'fixed bottom-4 right-4 bg-orange-100 border-l-4 border-orange-500 text-orange-700 p-4 rounded shadow-lg z-50 transition-opacity duration-300'),
    (e.innerHTML =
      '\n        <div class="flex items-center">\n            <div class="shrink-0">\n                <svg class="h-6 w-6 text-orange-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">\n                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" \n                        d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>\n                </svg>\n            </div>\n            <div class="ml-3">\n                <p class="text-sm font-medium">A new version is available</p>\n                <div class="mt-2 flex space-x-4">\n                    <button onclick="window.location.reload()" \n                        class="px-3 py-1 text-sm font-medium text-white bg-orange-500 hover:bg-orange-600 rounded transition-colors">\n                        Update now\n                    </button>\n                    <button onclick="this.closest(\'.fixed\').remove()" \n                        class="px-3 py-1 text-sm font-medium text-orange-700 hover:text-orange-800 transition-colors">\n                        Later\n                    </button>\n                </div>\n            </div>\n        </div>\n    '),
    document.body.appendChild(e);
}
function updateYear() {
  const e = document.getElementById('currentYear');
  e && (e.textContent = new Date().getFullYear());
}
function init() {
  const e = document.getElementById('pageLoader');
  if (
    (e &&
      window.addEventListener('load', () => {
        setTimeout(() => {
          e.classList.add('hidden'), setTimeout(() => e.remove(), 300);
        }, 500);
      }),
    compatibilityChecker.check(),
    checkFontAwesome(),
    'undefined' == typeof Chart && handleChartError(),
    registerServiceWorker(),
    updateYear(),
    'loading' in HTMLImageElement.prototype)
  )
    document.querySelectorAll('img[data-src]').forEach((e) => {
      e.src = e.dataset.src;
    });
  else {
    const e = new IntersectionObserver((e, t) => {
      e.forEach((e) => {
        if (e.isIntersecting) {
          const r = e.target;
          (r.src = r.dataset.src), t.unobserve(r);
        }
      });
    });
    document.querySelectorAll('img[data-src]').forEach((t) => {
      e.observe(t);
    });
  }
}
init();
