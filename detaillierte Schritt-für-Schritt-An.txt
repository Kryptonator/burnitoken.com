detaillierte Schritt-für-Schritt-Anleitung, um Ihre Webseite von unserem aktuellen Stand bis zum Live-Gang zu bringen. Ich habe die Aufgaben in logische Phasen unterteilt.

Phase 1: Inhalte und Assets finalisieren (Ihre direkten Aktionen)
In dieser Phase geht es darum, alle Inhalte und Mediendateien bereitzustellen. Dies ist die Grundlage für alles Weitere.

Schritt 1: Übersetzungen der neuen Schlüssel überprüfen und vervollständigen

Ziel: Sicherstellen, dass die 22 neuen Schlüssel (für Bilder-Alt-Texte, Diagramm-ARIA-Labels und Tabellenüberschriften) in allen 13 Sprachen korrekt sind.
Ihre Aktion:
Öffnen Sie die letzte Version der main.js-Datei (Canvas-ID: burni_token_main_js).
Gehen Sie die translations-Objekte für jede der 13 Sprachen durch.
Konzentrieren Sie sich auf die folgenden 22 Schlüssel und prüfen Sie, ob die Übersetzung passt. Falls eine Übersetzung fehlt (oder noch auf Englisch ist), ersetzen Sie sie bitte:
alt_mascot_hero
alt_coin_image
alt_gamepad_icon
alt_palette_icon
alt_award_icon
alt_exchange_icon
alt_vote_icon
alt_xrpl_speed_icon
alt_trade_mascot
alt_burni_burning_campfire
alt_burni_locks_vault
alt_use_case_rewards
alt_burni_schedule_calculation
alt_burni_chart_illustration
alt_burnicoin_image
schedule_chart_aria_label
supply_chart_aria_label
ath_atl_chart_aria_label
date
day
process_no
remaining_coins
Senden Sie mir die vervollständigten Übersetzungsblöcke (z.B. für pt, hi, it etc.).
Schritt 2: Alle Bilder, Videos und Dokumente bereitstellen

Ziel: Alle Mediendateien an einem Ort sammeln und für den Webserver vorbereiten.
Ihre Aktion:
Erstellen Sie auf Ihrem Computer einen Ordner namens assets.
Laden Sie alle Bilder, die Sie mir geschickt haben, von Google Drive herunter und legen Sie sie in diesen Ordner. Benennen Sie die Dateien bitte um, damit sie den Namen im HTML-Code entsprechen (z.B. Burni.jpg, burni-versperrt-tresor.jpg, burni-chart-illustration.jpg etc.). Verwenden Sie am besten nur Kleinbuchstaben und Bindestriche statt Leerzeichen.
Laden Sie Ihre "Blackhole"-Animation herunter und speichern Sie sie als token-burn.mp4 im assets-Ordner.
Legen Sie Ihr Logo als burni-logo.png und Ihr Whitepaper als whitepaper.pdf ebenfalls in den assets-Ordner.
Erstellen Sie ein og-image.jpg (idealerweise 1200x630 Pixel) für Social-Media-Vorschauen und legen Sie es in den assets-Ordner.
Schritt 3: Favicon erstellen und bereitstellen

Ziel: Ein wiedererkennbares Browser-Icon für Ihre Webseite erstellen.
Ihre Aktion:
Nehmen Sie eines Ihrer Logos (z.B. die stilisierte Flamme).
Nutzen Sie einen Online-Konverter wie den von Ihnen genannten freeconvert.com, um folgende Dateien zu erstellen:
favicon.ico (eine 32x32 Pixel Version ist ausreichend)
favicon-16x16.png
favicon-32x32.png
apple-touch-icon.png (180x180 Pixel)
Legen Sie auch diese Dateien in Ihren /assets-Ordner.
Wenn Sie diese drei Schritte abgeschlossen haben, ist der inhaltliche Teil Ihrer Arbeit so gut wie erledigt.

Phase 2: Technische Implementierung (Ihre/Entwickler-Aufgabe)
Diese Schritte erfordern in der Regel Zugriff auf den Server und Entwicklungswerkzeuge.

Schritt 4: Server für statische Assets konfigurieren

Ziel: Sicherstellen, dass der Webserver den /assets-Ordner ausliefert.
Aktion (Entwickler): Konfigurieren Sie Ihren Server so, dass der assets-Ordner öffentlich zugänglich ist (z.B. in Node.js/Express mit app.use('/assets', express.static('assets'));).
Schritt 5: CSS Build-Prozess einrichten und ausführen

Ziel: Die finale CSS-Datei erstellen.
Aktion (Entwickler): Folgen Sie dem Plan (den Sie zuletzt geschickt haben), um npm und PostCSS zu verwenden und den Befehl npm run build:css auszuführen. Dadurch wird die Datei /assets/styles.min.css erstellt, die von der index.html geladen wird.
Schritt 6: Live-API-Daten integrieren

Ziel: Die Platzhalter-Daten durch echte Live-Daten vom XRPL ersetzen.
Aktion (Entwickler):
Implementieren Sie die fetchLivePrices-Funktion in main.js vollständig.
Nutzen Sie die recherchierten API-Endpunkte für xrpscan.com, data.ripple.com oder andere Dienste, um Preis, Versorgung, Halter etc. für Burni und XPM abzurufen.
Implementieren Sie eine robuste Fehlerbehandlung und Caching-Strategie, wie in Ihrem Plan skizziert.
Schritt 7: Serverseitige Sicherheit (Nonce) implementieren

Ziel: Die Webseite gegen Cross-Site-Scripting (XSS) absichern.
Aktion (Entwickler): Implementieren Sie die serverseitige Logik, die für jede Anfrage einen einzigartigen nonce-Wert generiert und diesen in den Content-Security-Policy-Header und alle <script>- und <link rel="stylesheet">-Tags (mit nonce Attribut) in der index.html einfügt.
Phase 3: Finale Tests und Live-Gang
Schritt 8: Umfassendes Testen

Ziel: Sicherstellen, dass alles wie erwartet funktioniert.
Ihre Aktion:
Testen Sie die Webseite auf verschiedenen Browsern (Chrome, Firefox, Safari) und Geräten (Desktop, Tablet, Smartphone).
Klicken Sie jeden Link und jede Schaltfläche an.
Wechseln Sie durch alle 13 Sprachen und prüfen Sie die Darstellung, insbesondere bei RTL-Sprachen (Arabisch, Hindi).
Verwenden Sie Accessibility-Tools wie WAVE oder axe, um die Barrierefreiheit zu prüfen.
Schritt 9: SEO-Finalisierung

Ziel: Die Webseite für Suchmaschinen optimieren.
Ihre Aktion:
Erstellen Sie eine sitemap.xml-Datei, die alle wichtigen Seiten auflistet (in diesem Fall hauptsächlich die Hauptseite, da es eine Single-Page-Anwendung ist).
Erstellen Sie eine robots.txt-Datei, um Suchmaschinen-Bots Anweisungen zu geben.
Überprüfen Sie, ob alle hreflang-Tags in der index.html auf die korrekten finalen URLs verweisen.
Schritt 10: Go Live!

Ziel: Die Webseite auf Ihrer Domain burnitoken.com veröffentlichen.
Aktion (Entwickler): Laden Sie alle finalen Dateien (HTML, CSS, JS, Assets) auf Ihren Produktionsserver hoch und schalten Sie die Domain auf.
Wenn Sie mir die Ergebnisse aus Schritt 1 (Übersetzungen) und die Information aus Schritt 2 (dass die Assets bereitstehen) geben, kann ich Ihnen einen finalen, sauberen Code-Stand für main.js und index.html liefern, den Sie dann für die technischen Schritte verwenden können.